worker_processes 1;

user nobody nogroup;
# 'user nobody nobody;' for systems with 'nobody' as a group instead
error_log  /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
  use epoll;
  worker_connections 2048;
  accept_mutex off; # set to 'on' if nginx worker_processes > 1
}

http {
  include mime.types;
  # fallback in case we can't determine a type
  default_type application/octet-stream;

  log_format custom '[$time_iso8601] "$request" $status $body_bytes_sent "$proxy_add_x_forwarded_for" "$http_user_agent"';

  upstream app {
    # fail_timeout=0 means we always retry an upstream even if it failed
    # to return a good HTTP response

    # for UNIX domain socket setups
    #server unix:/tmp/gunicorn.sock fail_timeout=0;

    # for a TCP configuration
    server 127.0.0.1:8000 fail_timeout=0;
  }

  server {
    listen 80 default_server;

    ## Set HSTS header
    add_header Strict-Transport-Security "max-age=63072000; preload";

    ## Size Limits & Buffer Overflows
    client_body_buffer_size 1K;
    client_header_buffer_size 1k;
    client_max_body_size 1k;
    large_client_header_buffers 2 1k;

    # set the correct host(s) for your site
    #server_name 127.0.0.1;
    # prevent version information from leaking
    server_tokens off;

    access_log /var/log/nginx/access.log custom;

    keepalive_timeout 5;

    location / {
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Host $http_host;
      # we don't want nginx trying to do something clever with
      # redirects, we set the Host: header above already.
      proxy_redirect off;
      proxy_pass http://app;
    }

    gzip on;
    gzip_types application/json;
  }
}
