AWSTemplateFormatVersion: '2010-09-09'
Description: Public subnets with internet gateway
Parameters:
  VPCName:
    Description: VPC Name
    Type: String

  EnableIpv6:
    Description: Boolean for amazon provided IPv6 CIDR block
    Type: String
    Default: 'false'

  Ipv6CidrBlocks:
    Description: Amazon assigned IPv6 cidr blocks
    Type: String
    Default: ''

  VPCIpv6CidrBlock:
    Description: Unused, but please do not delete.
    Type: String
    Default: ''

  PublicSubnet1:
    Description: The CIDR for the public subnet in availability zone 1
    Type: String
    MinLength: '9'
    MaxLength: '19'
    AllowedPattern: >-
      ^([0-9]|[1-9][0-9]|1[0-9]{2}|2([0-4][0-9]|5[0-5])).([0-9]|[1-9][0-9]|1[0-9]{2}|2([0-4][0-9]|5[0-5])).([0-9]|[1-9][0-9]|1[0-9]{2}|2([0-4][0-9]|5[0-5])).([0-9]|[1-9][0-9]|1[0-9]{2}|2([0-4][0-9]|5[0-5]))/([0-9]|[12][0-9]|3[0-2])
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x

  PublicSubnet2:
    Description: The CIDR for the public subnet in availability zone 2
    Type: String
    MinLength: '9'
    MaxLength: '19'
    AllowedPattern: >-
      ^([0-9]|[1-9][0-9]|1[0-9]{2}|2([0-4][0-9]|5[0-5])).([0-9]|[1-9][0-9]|1[0-9]{2}|2([0-4][0-9]|5[0-5])).([0-9]|[1-9][0-9]|1[0-9]{2}|2([0-4][0-9]|5[0-5])).([0-9]|[1-9][0-9]|1[0-9]{2}|2([0-4][0-9]|5[0-5]))/([0-9]|[12][0-9]|3[0-2])
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x

  PublicSubnet3:
    Description: The CIDR for the public subnet in availability zone 3
    Type: String
    MinLength: '9'
    MaxLength: '19'
    AllowedPattern: >-
      ^([0-9]|[1-9][0-9]|1[0-9]{2}|2([0-4][0-9]|5[0-5])).([0-9]|[1-9][0-9]|1[0-9]{2}|2([0-4][0-9]|5[0-5])).([0-9]|[1-9][0-9]|1[0-9]{2}|2([0-4][0-9]|5[0-5])).([0-9]|[1-9][0-9]|1[0-9]{2}|2([0-4][0-9]|5[0-5]))/([0-9]|[12][0-9]|3[0-2])
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x
    Default: '0.0.0.0/32'

  PublicSubnet4:
    Description: The CIDR for the public subnet in availability zone 4
    Type: String
    MinLength: '9'
    MaxLength: '19'
    AllowedPattern: >-
      ^([0-9]|[1-9][0-9]|1[0-9]{2}|2([0-4][0-9]|5[0-5])).([0-9]|[1-9][0-9]|1[0-9]{2}|2([0-4][0-9]|5[0-5])).([0-9]|[1-9][0-9]|1[0-9]{2}|2([0-4][0-9]|5[0-5])).([0-9]|[1-9][0-9]|1[0-9]{2}|2([0-4][0-9]|5[0-5]))/([0-9]|[12][0-9]|3[0-2])
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x
    Default: '0.0.0.0/32'

  VpcId:
    Description: The VPC ID to create subnets in
    Type: AWS::EC2::VPC::Id

Conditions:
  EnableIpv6_IsSet: !Not
    - !Equals
      - !Ref 'EnableIpv6'
      - 'false'

  PublicSubnet3_IsSet: !Not
    - !Equals
      - !Ref 'PublicSubnet3'
      - '0.0.0.0/32'

  PublicSubnet3Ipv6_IsSet: !And
    - !Not
      - !Equals
        - !Ref 'PublicSubnet3'
        - '0.0.0.0/32'
    - !Condition 'EnableIpv6_IsSet'

  PublicSubnet4_IsSet: !Not
    - !Equals
      - !Ref 'PublicSubnet4'
      - '0.0.0.0/32'

  PublicSubnet4Ipv6_IsSet: !And
    - !Not
      - !Equals
        - !Ref 'PublicSubnet4'
        - '0.0.0.0/32'
    - !Condition 'EnableIpv6_IsSet'

Resources:
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref 'VPCName'

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn: InternetGateway
    Properties:
      VpcId: !Ref 'VpcId'
      InternetGatewayId: !Ref 'InternetGateway'

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VpcId'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'VPCName'
              - public

  PublicSubnet1Stack:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VpcId'
      AvailabilityZone: !Select
        - '0'
        - !GetAZs
          Ref: AWS::Region
      CidrBlock: !Ref 'PublicSubnet1'
      Ipv6CidrBlock: !If
        - EnableIpv6_IsSet
        - !Join
          - ''
          - - !Select
              - 0
              - !Split
                - '00::/56'
                - !Select
                  - 0
                  - - !Ref 'Ipv6CidrBlocks'
            - '00::/64'
        - !Ref 'AWS::NoValue'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'VPCName'
              - public-1

  PublicSubnet2Stack:
    Type: AWS::EC2::Subnet
    Properties:
      MapPublicIpOnLaunch: true
      VpcId: !Ref 'VpcId'
      AvailabilityZone: !Select
        - '1'
        - !GetAZs
          Ref: AWS::Region
      CidrBlock: !Ref 'PublicSubnet2'
      Ipv6CidrBlock: !If
        - EnableIpv6_IsSet
        - !Join
          - ''
          - - !Select
              - 0
              - !Split
                - '00::/56'
                - !Select
                  - 0
                  - - !Ref 'Ipv6CidrBlocks'
            - '01::/64'
        - !Ref 'AWS::NoValue'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'VPCName'
              - public-2

  PublicSubnet3Stack:
    Condition: PublicSubnet3_IsSet
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'VpcId'
      AvailabilityZone: !Select
        - '2'
        - !GetAZs
          Ref: AWS::Region
      CidrBlock: !Ref 'PublicSubnet3'
      Ipv6CidrBlock: !If
        - EnableIpv6_IsSet
        - !Join
          - ''
          - - !Select
              - 0
              - !Split
                - '00::/56'
                - !Select
                  - 0
                  - - !Ref 'Ipv6CidrBlocks'
            - '02::/64'
        - !Ref 'AWS::NoValue'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'VPCName'
              - public-3

  PublicSubnet4Stack:
    Type: AWS::EC2::Subnet
    Condition: PublicSubnet4_IsSet
    Properties:
      VpcId: !Ref 'VpcId'
      AvailabilityZone: !Select
        - '3'
        - !GetAZs
          Ref: AWS::Region
      CidrBlock: !Ref 'PublicSubnet4'
      Ipv6CidrBlock: !If
        - EnableIpv6_IsSet
        - !Join
          - ''
          - - !Select
              - 0
              - !Split
                - '00::/56'
                - !Select
                  - 0
                  - - !Ref 'Ipv6CidrBlocks'
            - '03::/64'
        - !Ref 'AWS::NoValue'
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref 'VPCName'
              - public-4

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnet1Stack'
      RouteTableId: !Ref 'PublicRouteTable'

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnet2Stack'
      RouteTableId: !Ref 'PublicRouteTable'

  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: PublicSubnet3_IsSet
    Properties:
      SubnetId: !Ref 'PublicSubnet3Stack'
      RouteTableId: !Ref 'PublicRouteTable'

  PublicSubnet4RouteTableAssociation:
    Condition: PublicSubnet4_IsSet
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'PublicSubnet4Stack'
      RouteTableId: !Ref 'PublicRouteTable'

  PublicRouteTableDefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'

  PublicRouteTableIpv6DefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Condition: EnableIpv6_IsSet
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      DestinationIpv6CidrBlock: ::/0
      GatewayId: !Ref 'InternetGateway'

Outputs:
  PublicRouteTable:
    Value: !Ref 'PublicRouteTable'

  PublicSubnet1Cidr:
    Value: !Ref 'PublicSubnet1'

  PublicSubnet1Id:
    Value: !Ref 'PublicSubnet1Stack'

  PublicSubnet1AZ:
    Value: !GetAtt 'PublicSubnet1Stack.AvailabilityZone'

  PublicSubnet2Cidr:
    Value: !Ref 'PublicSubnet2'

  PublicSubnet2Id:
    Value: !Ref 'PublicSubnet2Stack'

  PublicSubnet2AZ:
    Value: !GetAtt 'PublicSubnet2Stack.AvailabilityZone'

  PublicSubnet3Cidr:
    Condition: PublicSubnet3_IsSet
    Value: !Ref 'PublicSubnet3'

  PublicSubnet3Id:
    Condition: PublicSubnet3_IsSet
    Value: !Ref 'PublicSubnet3Stack'

  PublicSubnet3AZ:
    Condition: PublicSubnet3_IsSet
    Value: !GetAtt 'PublicSubnet3Stack.AvailabilityZone'

  PublicSubnet4Cidr:
    Condition: PublicSubnet4_IsSet
    Value: !Ref 'PublicSubnet4'

  PublicSubnet4Id:
    Condition: PublicSubnet4_IsSet
    Value: !Ref 'PublicSubnet4Stack'

  PublicSubnet4AZ:
    Condition: PublicSubnet4_IsSet
    Value: !GetAtt 'PublicSubnet4Stack.AvailabilityZone'

  InternetGatewayId:
    Value: !Ref 'InternetGateway'
