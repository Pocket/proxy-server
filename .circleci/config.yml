# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1

orbs:
  aws-cli: circleci/aws-cli@0.1.13
  aws-ecr: circleci/aws-ecr@6.5.0
  assume-role: airswap/assume-role@0.2.0

jobs:
  tests_unit:
    docker:
      - image: circleci/python:3.7.4
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    working_directory: ~/proxy-server
    parameters:
      pipenv_path:
        default: "./"
        type: string
    environment:
      WORKON_HOME: '~/.venv'
    steps:
      - checkout

      - restore_cache:
          key: deps-test-{{ checksum "<<parameters.pipenv_path>>Pipfile.lock" }}
      - run:
          name: Build environment and install requirements
          command: |
            pip install pipenv
            pipenv install --dev
      - save_cache:
          key: deps-test-{{ checksum "<<parameters.pipenv_path>>Pipfile.lock" }}
          paths:
            - "~/.venv"

      - run:
          name: Run tests
          environment:
            APP_ENV: test
          command: |
            mkdir test-reports/
            pipenv run pytest tests/unit/ --cov=. --cov-config=.proxy_coveragerc --junitxml=test-reports/junit.xml
            pipenv run coverage html --rcfile=.proxy_coveragerc

      # test reporting and pylint are still WIP
      - store_test_results:
          path: test-reports

      - store_artifacts:
          path: proxy-server-coverage


  docker_build:
    parameters:
      tag:
        description: 'The docker tag name'
        type: string
      environment:
        description: 'The environment name'
        type: string
      ecr_url:
        description: 'The ecr url'
        type: string
      repo_name:
        description: 'The ecr repo name'
        type: string
      push:
        description: 'Whether or not to push the code'
        type: boolean
        default: false
    docker:
      - image: cimg/base:2020.01
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    steps:
      - checkout
      - run:
          name: Setup common environment variables
          command: |
            echo 'export AWS_ECR_ACCOUNT_URL="<< parameters.ecr_url >>"' >> $BASH_ENV
            echo 'export AWS_REGION=${<< parameters.environment >>_AWS_DEFAULT_REGION}' >> $BASH_ENV
      - run:
          name: Setup docker build
          command: |
            cp images/app/Dockerfile .
      - when:
          condition: <<parameters.push>>
          steps:
            - aws-ecr/build-and-push-image:
                checkout: false
                repo: << parameters.repo_name >>
                setup-remote-docker: true
                aws-access-key-id: << parameters.environment >>_AWS_ACCESS_KEY
                aws-secret-access-key: << parameters.environment >>_AWS_SECRET_ACCESS_KEY
                tag: << parameters.tag >>
                extra-build-args: --build-arg GIT_SHA=${CIRCLE_SHA1}
      - unless:
          condition: <<parameters.push>>
          steps:
            - setup_remote_docker
            - aws-ecr/build-image:
                repo: << parameters.repo_name >>
                tag: << parameters.tag >>
                extra-build-args: --build-arg GIT_SHA=${CIRCLE_SHA1}

  build:
    parameters:
      env:
        description: Deployment environment
        type: enum
        enum: ["dev", "prod", "staging"]
        default: dev
      main_image_name:
        description: Main Docker image name
        type: string
        default: proxy
    docker:
      - image: pocket/ops-cli:v0.0.5
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
        environment:
          MAIN_IMAGE_NAME: << parameters.main_image_name >>
    steps:
      - checkout
      - when:
          condition:
            equal: ["dev", << parameters.env >>]
          steps:
            - run:
                name: Setup common environment variables
                command: |
                  echo "building for dev...main image name is $MAIN_IMAGE_NAME"
                  echo 'export AWS_ECR_ACCOUNT_DEV_URL="${ACCOUNT_ID_DEV}.dkr.ecr.us-east-1.amazonaws.com"' >> $BASH_ENV
                  echo 'export AWS_ECR_ACCOUNT_URL="${AWS_ECR_ACCOUNT_DEV_URL}"' >> $BASH_ENV
            - assume-role/assume-role:
                account-id: $ACCOUNT_ID_DEV
      - when:
          condition:
            equal: ["prod", << parameters.env >>]
          steps:
            - run:
                name: Setup common environment variables
                command: |
                  echo "building for prod...main image name is $MAIN_IMAGE_NAME"
                  echo 'export AWS_ECR_ACCOUNT_PROD_URL="${ACCOUNT_ID_PROXY}.dkr.ecr.us-east-1.amazonaws.com"' >> $BASH_ENV
                  echo 'export AWS_ECR_ACCOUNT_URL="${AWS_ECR_ACCOUNT_PROD_URL}"' >> $BASH_ENV
            - assume-role/assume-role:
                account-id: $ACCOUNT_ID_PROXY
      - aws-ecr/ecr-login
      - aws-ecr/build-and-push-image:
          checkout: false
          repo: $MAIN_IMAGE_NAME
          setup-remote-docker: true
          tag: $CIRCLE_SHA1,latest
          dockerfile: ./images/app/Dockerfile
          extra-build-args: --build-arg GIT_SHA=${CIRCLE_SHA1}



# Workflow shortcuts
not_main: &not_main
  filters:
    branches:
      ignore:
        - main

only_main: &only_main
  filters:
    branches:
      only:
        - main

not_dev: &not_dev
  filters:
    branches:
      ignore:
        - dev

not_dev_main: &not_dev_main
  filters:
    branches:
      ignore:
        - dev
        - main

only_dev: &only_dev
  filters:
    branches:
      only:
        - dev

workflows:
  version: 2
  build_and_test:
    jobs:
      - tests_unit:
          context: pocket-proxy
      - build:
          <<: *not_main
          env: dev
          main_image_name: proxy-server-dev
          context: pocket-proxy
          requires:
            - tests_unit

      # Try building the ECS docker image on each branch
      - docker_build:
          <<: *not_dev_main
          context: pocket
          name: build_docker
          environment: 'Dev'
          tag: latest,$CIRCLE_SHA1
          repo_name: recommendationapi-dev-app
          ecr_url: 410318598490.dkr.ecr.us-east-1.amazonaws.com
          push: false

      # Build & Deploy the Dev Docker Image
      - docker_build:
          <<: *only_dev
          context: pocket
          name: build_docker_dev
          environment: 'Dev'
          tag: latest,$CIRCLE_SHA1
          repo_name: recommendationapi-dev-app
          ecr_url: 410318598490.dkr.ecr.us-east-1.amazonaws.com
          push: true

      # Build & Deploy the Prod Docker Image
      - docker_build:
          <<: *only_main
          context: pocket
          name: build_docker_prod
          environment: 'Prod'
          tag: latest,$CIRCLE_SHA1
          repo_name: proxyserver-prod-app
          ecr_url: 996905175585.dkr.ecr.us-east-1.amazonaws.com
          push: true

      - aws-ecs/deploy-service-update:
          <<: *only_dev
          context: pocket
          name: deploy_ecs_dev
          family: 'ProxyServer-Dev'
          cluster-name: 'ProxyServer-Dev'
          deployment-controller: 'CODE_DEPLOY'
          codedeploy-application-name: 'ProxyServer-Dev-ECS'
          codedeploy-deployment-group-name: 'ProxyServer-Dev-ECS'
          codedeploy-load-balanced-container-name: app
          codedeploy-load-balanced-container-port: 8000
          container-image-name-updates: 'container=app,image-and-tag=410318598490.dkr.ecr.us-east-1.amazonaws.com/recommendationapi-dev-app:$CIRCLE_SHA1'
          aws-access-key-id: $Dev_AWS_ACCESS_KEY
          aws-secret-access-key: $Dev_AWS_SECRET_ACCESS_KEY
          aws-region: $Dev_AWS_DEFAULT_REGION
          requires:
            - build_docker_dev

      - aws-ecs/deploy-service-update:
          <<: *only_main
          name: deploy_ecs_prod
          context: pocket
          family: 'ProxyServer-Prod'
          cluster-name: 'ProxyServer-Prod'
          deployment-controller: 'CODE_DEPLOY'
          codedeploy-application-name: 'ProxyServer-Prod-ECS'
          codedeploy-deployment-group-name: 'ProxyServer-Prod-ECS'
          codedeploy-load-balanced-container-name: app
          codedeploy-load-balanced-container-port: 8000
          container-image-name-updates: 'container=app,image-and-tag=996905175585.dkr.ecr.us-east-1.amazonaws.com/recommendationapi-prod-app:$CIRCLE_SHA1'
          aws-access-key-id: $Prod_AWS_ACCESS_KEY
          aws-secret-access-key: $Prod_AWS_SECRET_ACCESS_KEY
          aws-region: $Prod_AWS_DEFAULT_REGION
          requires:
            - build_docker_prod

      - pocket/setup_deploy_params:
          <<: *only_main
          name: setup-deploy-params-prod
          aws_access_key_id: Prod_AWS_ACCESS_KEY
          aws_secret_access_key: Prod_AWS_SECRET_ACCESS_KEY
          context: pocket
          env: Prod
          service_name: ProxyServer

      - pocket/setup_deploy_params:
          <<: *only_dev
          name: setup-deploy-params-dev
          aws_access_key_id: Dev_AWS_ACCESS_KEY
          aws_secret_access_key: Dev_AWS_SECRET_ACCESS_KEY
          context: pocket
          env: Dev
          service_name: ProxyServer

# TODO: This orb needs to take in a custom url and API key.
#      # Notify sentry of main deployment
#      - pocket/sentry_release_notification:
#          <<: *only_main
#          name: sentry-release-notification-prod
#          context: pocket
#          repository_name: Pocket/proxy-server
#          sentry_project_name: proxy-server
#          sentry_env: production
#          sentry_org: pocket
#          workspace-path: /tmp/workspace
#          requires:
#            - build_docker_prod
#
#      # Notify sentry of dev deployment
#      - pocket/sentry_release_notification:
#          <<: *only_dev
#          name: sentry-release-notification-dev
#          context: pocket
#          repository_name: Pocket/proxy-server
#          sentry_project_name: proxy-server
#          sentry_env: development
#          sentry_org: pocket
#          workspace-path: /tmp/workspace
#          requires:
#            - build_docker_dev
