# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1

orbs:
  aws-cli: circleci/aws-cli@0.1.13
  aws-ecr: circleci/aws-ecr@6.5.0
  assume-role: airswap/assume-role@0.2.0

jobs:
  tests_unit:
    docker:
      - image: circleci/python:3.7.4
    working_directory: ~/proxy-server
    steps:
      - checkout

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "pip.lock" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r pip.lock
            pip install -r requirements.dev.txt

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "pip.lock" }}

      - run:
          name: Run tests
          command: |
            . venv/bin/activate
            mkdir test-reports/
            pytest tests/unit/ --cov=. --cov-config=.proxy_coveragerc --junitxml=test-reports/junit.xml
            coverage html --rcfile=.proxy_coveragerc

      # test reporting and pylint are still WIP
      - store_test_results:
          path: test-reports

      - store_artifacts:
          path: proxy-server-coverage

  build:
    parameters:
      env:
        description: Deployment environment
        type: enum
        enum: ["dev", "prod", "staging"]
        default: dev
    docker:
      - image: pocket/ops-cli:v0.0.5
        environment:
          MAIN_IMAGE_NAME: proxy-server-dev
    steps:
      - checkout
      - when:
          condition:
            equal: ["dev", << parameters.env >>]
          steps:
            - run:
                name: Setup common environment variables
                command: |
                  echo "building for dev...main image name is $MAIN_IMAGE_NAME"
                  echo 'export AWS_ECR_ACCOUNT_DEV_URL="${ACCOUNT_ID_DEV}.dkr.ecr.us-east-1.amazonaws.com"' >> $BASH_ENV
                  echo 'export AWS_ECR_ACCOUNT_URL="${AWS_ECR_ACCOUNT_DEV_URL}"' >> $BASH_ENV
            - assume-role/assume-role:
                account-id: $ACCOUNT_ID_DEV
      - when:
          condition:
            equal: ["prod", << parameters.env >>]
          steps:
            - run:
                name: Change main image name for prod
                command: |
                  export MAIN_IMAGE_NAME="proxy"
            - run:
                name: Setup common environment variables
                command: |
                  echo "building for prod...main image name is $MAIN_IMAGE_NAME"
                  echo 'export AWS_ECR_ACCOUNT_PROXY_URL="${ACCOUNT_ID_PROXY}.dkr.ecr.us-east-1.amazonaws.com"' >> $BASH_ENV
                  echo 'export AWS_ECR_ACCOUNT_URL="${AWS_ECR_ACCOUNT_PROD_URL}"' >> $BASH_ENV
            - assume-role/assume-role:
                account-id: $ACCOUNT_ID_PROXY
      - aws-ecr/ecr-login
      - aws-ecr/build-and-push-image:
          checkout: false
          repo: $MAIN_IMAGE_NAME
          setup-remote-docker: true
          tag: $CIRCLE_SHA1,latest
          dockerfile: ./images/app/Dockerfile


# Workflow shortcuts
not_master: &not_master
  filters:
    branches:
      ignore:
        - master

only_master: &only_master
  filters:
    branches:
      only:
        - master

workflows:
  version: 2
  build_and_test:
    jobs:
      - tests_unit:
          context: pocket-proxy
      - build:
          <<: *not_master
          env: dev
          context: pocket-proxy
          requires:
            - tests_unit
      - build:
          <<: *only_master
          env: prod
          context: pocket-proxy
          requires:
            - tests_unit


